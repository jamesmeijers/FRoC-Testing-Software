# -*- python -*-
# ex: set filetype=python:

import sys
from buildbot.plugins import *
from buildbot.plugins import steps, util
from buildbot.plugins import schedulers, changes

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("FRoC-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9088}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
source_code_git_url='https://github.com/ibrahimai/FRoC'

c['change_source'] = GitPoller(
				source_code_git_url,
				branch='master',
				workdir='/home/frocbot/gitpoller_workdir',
				pollinterval=60*5
			      )


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build
from buildbot.schedulers.basic import SingleBranchScheduler
#schedulers.
scheduler1 = SingleBranchScheduler(
			name="basic_test",
			branch='master',
			treeStableTimer=60*2,
			builderNames=["FRoC_build"]
			)
#testing scheduler
#scheduler2 = schedulers.Periodic(
#			name="3-min",
#			builderNames=["FRoC_build"],
#			periodicBuildTimer=60*3,
#			branch='master'
#			)

			


c['schedulers'] = [scheduler1] #[scheduler1, scheduler2] #for testing

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

FRoC_build = util.BuildFactory()

#pull from git 
get_update = steps.Git(name="get_repo", repourl=source_code_git_url, method='clobber')
#run test (with build)

#replace the makefile with one with proper gurobi location
del_makefile = steps.ShellCommand(name="delete_makefile", command="rm ~/buildbot/worker/FRoC_build/build/multiple_paths/build/makefile", haltOnFailure=True, description="run tester")

cp_makefile = steps.ShellCommand(name="replace_makefile", command="cp ~/buildbot/worker/makefile-local ~/buildbot/worker/FRoC_build/build/multiple_paths/build/makefile", haltOnFailure=True, description="run tester")

#build FRoC and meta parser
build_FRoC = steps.ShellCommand(name="build", command="python ~/FRoC_TEST_PACKAGE/Scripts/run_FRoC_tester.py -b", haltOnFailure=True, description="run tester")

#run simulation on all testbenches
run_simulation = steps.ShellCommand(name="simulate all", command="python ~/FRoC_TEST_PACKAGE/Scripts/run_FRoC_tester.py -b -s -a", haltOnFailure=True, description="run tester")

#run full test (including compilation) on crossbar testbench
run_full_test = steps.ShellCommand(name="Full Test Crossbar", command="python ~/FRoC_TEST_PACKAGE/Scripts/run_FRoC_tester.py -b -n crossbar", haltOnFailure=True, description="run tester")


FRoC_build.addStep(get_update)
FRoC_build.addStep(del_makefile)
FRoC_build.addStep(cp_makefile)
FRoC_build.addStep(build_FRoC)
FRoC_build.addStep(run_simulation)
FRoC_build.addStep(run_full_test)


FRoC_build = util.BuilderConfig(name="FRoC_build", workernames=['FRoC-worker'], factory = FRoC_build)

c['builders'] = [FRoC_build]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "FRoC"
c['titleURL'] = "https://github.com/Ibrahimai/FRoC"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://betzgrp-pchenry.eecg.utoronto.ca:9080/"

# minimalistic config to activate new web UI
c['www'] = dict(port=9080,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
